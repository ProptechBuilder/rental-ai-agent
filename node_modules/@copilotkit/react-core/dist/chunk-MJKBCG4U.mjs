import {
  __async,
  __spreadValues
} from "./chunk-SKC7AJIV.mjs";

// src/utils/fetch-chat-completion.ts
import {
  decodeChatCompletion,
  parseChatCompletion,
  decodeChatCompletionAsText,
  EXCLUDE_FROM_FORWARD_PROPS_KEYS
} from "@copilotkit/shared";
function fetchChatCompletion(_0) {
  return __async(this, arguments, function* ({
    copilotConfig,
    model,
    messages,
    tools,
    temperature,
    headers,
    body,
    signal,
    toolChoice
  }) {
    temperature || (temperature = 0.5);
    tools || (tools = []);
    const cleanedMessages = messages.map((message) => {
      const { content, role, name, function_call } = message;
      return { content, role, name, function_call };
    });
    toolChoice || (toolChoice = "auto");
    const response = yield fetch(copilotConfig.chatApiEndpoint, {
      method: "POST",
      headers: __spreadValues(__spreadValues({
        "Content-Type": "application/json"
      }, copilotConfig.headers), headers ? __spreadValues({}, headers) : {}),
      body: JSON.stringify(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({
        model,
        messages: cleanedMessages,
        stream: true
      }, tools.length ? { tools } : {}), temperature ? { temperature } : {}), tools.length != 0 ? { tool_choice: toolChoice } : {}), copilotConfig.body), copilotConfig.backendOnlyProps), excludeBackendOnlyProps(copilotConfig)), body ? __spreadValues({}, body) : {}), copilotConfig.cloud ? { cloud: copilotConfig.cloud } : {})),
      signal,
      credentials: copilotConfig.credentials
    });
    return response;
  });
}
function excludeBackendOnlyProps(copilotConfig) {
  var _a;
  const backendOnlyProps = (_a = copilotConfig.backendOnlyProps) != null ? _a : {};
  if (Object.keys(backendOnlyProps).length > 0) {
    return {
      [EXCLUDE_FROM_FORWARD_PROPS_KEYS]: Object.keys(backendOnlyProps)
    };
  } else {
    return {};
  }
}
function fetchAndDecodeChatCompletion(params) {
  return __async(this, null, function* () {
    const response = yield fetchChatCompletion(params);
    if (!response.ok || !response.body) {
      response.events = null;
    } else {
      const events = yield decodeChatCompletion(parseChatCompletion(response.body));
      response.events = events;
    }
    return response;
  });
}
function fetchAndDecodeChatCompletionAsText(params) {
  return __async(this, null, function* () {
    const response = yield fetchChatCompletion(params);
    if (!response.ok || !response.body) {
      response.events = null;
    } else {
      const events = yield decodeChatCompletionAsText(
        decodeChatCompletion(parseChatCompletion(response.body))
      );
      response.events = events;
    }
    return response;
  });
}

export {
  fetchChatCompletion,
  fetchAndDecodeChatCompletion,
  fetchAndDecodeChatCompletionAsText
};
//# sourceMappingURL=chunk-MJKBCG4U.mjs.map